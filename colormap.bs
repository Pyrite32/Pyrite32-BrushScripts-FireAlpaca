function param1()
return "H-Curve", 0,10,5
end

function param2()
return "Divergence", 0,10,0
end


function main( x, y, p )
  return 0
end

function get_hsv(r,g,b)
  local rp,gp,bp =  r/255, g/255, b/255
  local brightest = math.max(math.max(rp,gp),bp)
  local darkest = math.min(math.min(rp,gp),bp)
  local delta = brightest - darkest

  if delta == 0 then h = 0
  elseif brightest == rp then
    h = (60 * ((gp - bp) / delta) + 360) % 360
  elseif brightest == gp then
     h = (60 * ((bp - rp) / delta) + 120) % 360
  elseif brightest == bp then
     h = (60 * ((rp - gp) / delta) + 240) % 360
   end

   if brightest == 0 then s = 0
   else s = (delta / brightest) end

   local v = brightest

  return h, s, v

end

function get_rgb(h,s,v)

  local C = v * s
  local X = C * (1 - math.abs( h / 60 %2  -1) )
  local M = v - C

  local R = 0
  local G = 0
  local B = 0

  if h >= 0 and h < 60 then 
    R = C
   G = X
  end
  if h >= 60 and h < 120 then
    R = X
   G = C
  end
  if h >= 120 and h < 180 then
    G = C
    B = X
  end
  if h >= 180 and h < 240 then
    G = X
    B = C
  end
  if h >= 240 and h < 300 then
    R = X
    B = C
  end
  if h >= 300 and h < 360 then
  R = C
  B = X
  end

  R = (R+M)*255
  G = (G+M)*255
  B = (B+M)*255
  return R,G,B

end

function hue_function(parameter)
return math.pow(parameter,hue_rate)
end

function interpolate(start, finish, param)
return param*(finish-start) + start
end

function draw_square(x,y,w,r,g,b)
bs_polygon(x- w/2, y - w/2)
bs_polygon(x+ w/2, y - w/2)
bs_polygon(x+ w/2, y + w/2)
bs_polygon(x- w/2, y + w/2)
bs_fill(r,g,b,255)
end

function clamp(min,max,val)
local val1 = math.max(min,val)
return math.min(max,val1)
end

function last( x, y, p )
  local w = bs_width_max()
  local r0,g0,b0 =  bs_fore()
  local rd, gd, bd, a = bs_pixel_get(x,y) -- Smart color interpolation
  local h0,s0,v0 = get_hsv(r0,g0, b0)
  local hd, sd, vd = get_hsv(rd,gd,bd)
  local counter = 0
  local area = 100
  for i = 0, 1, 0.1 do
    for j = 0, 1, 0.1 do
          local sat = clamp(0,1,interpolate(s0-divergence/2,sd+divergence, i))
          local val = clamp(0,1,interpolate(v0+divergence/4,vd-divergence/2, j))
          local offx = w * i * 10
 	   local offy = w * j * 10
          counter = counter + 1
          local hue = 0
	   local anti_hd = hd - 360
          local shift_reverse = h0 - anti_hd  < 180
          local hue_divergence = divergence * 60
          if shift_reverse then
            hue =interpolate(h0-hue_divergence,anti_hd+hue_divergence,hue_function(i))
          else
            hue = interpolate(h0-hue_divergence,hd+hue_divergence, hue_function(i))
          end
          if hue < 0 then hue = 360 + hue end
	   local r,g,b = get_rgb(hue,sat,val)
	   draw_square(x+offx,y+offy,w,r,g,b)
       end
  end
end

hue_rate = math.pow(2, bs_param1() - 5)
divergence = bs_param2() / 10
bs_setmode(0)
