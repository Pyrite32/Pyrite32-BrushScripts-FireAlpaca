function param1()
return "Hue Shift Opposite", 0,1,0
end

function param2()
return "H-Curve", 0, 6, 0
end 

function param3()
return "SV Curve Pair", 1, 10,1
end

function param4()
return "S-Divergence", 0, 20, 10
end 

function param5()
return "V-Divergence", 0, 20, 10
end 

function main( x, y, p )

if firstcall then
  firstcall = false
  rd, gd, bd, a = bs_pixel_get(x,y) -- Smart color interpolation
end

return 0
end

function draw_borders(w,W)
bs_polygon(0,0)
bs_polygon(0,w)
bs_polygon(W,w)
bs_polygon(W,0)
bs_fill(0,0,0,255)

bs_polygon(0,0)
bs_polygon(w,0)
bs_polygon(w,W)
bs_polygon(0,W)
bs_fill(0,0,0,255)

bs_polygon(W,0)
bs_polygon(W+w,0)
bs_polygon(W+w,W)
bs_polygon(W,W)
bs_fill(0,0,0,255)

bs_polygon(0,W)
bs_polygon(0, W+w)
bs_polygon(W+w,W+w)
bs_polygon(W+w,W)
bs_fill(0,0,0,255)
end

function get_hsv(r,g,b)
  local rp,gp,bp =  r/255, g/255, b/255
  local brightest = math.max(math.max(rp,gp),bp)
  local darkest = math.min(math.min(rp,gp),bp)
  local delta = brightest - darkest

  if delta == 0 then h = 0
  elseif brightest == rp then
    h = (60 * ((gp - bp) / delta) + 360) % 360
  elseif brightest == gp then
     h = (60 * ((bp - rp) / delta) + 120) % 360
  elseif brightest == bp then
     h = (60 * ((rp - gp) / delta) + 240) % 360
   end

   if brightest == 0 then s = 0
   else s = (delta / brightest) end

   local v = brightest

  return h, s, v

end

function get_rgb(h,s,v)

  local C = v * s
  local X = C * (1 - math.abs( h / 60 %2  -1) )
  local M = v - C

  local R = 0
  local G = 0
  local B = 0

  if h >= 0 and h < 60 then 
    R = C
   G = X
  end
  if h >= 60 and h < 120 then
    R = X
   G = C
  end
  if h >= 120 and h < 180 then
    G = C
    B = X
  end
  if h >= 180 and h < 240 then
    G = X
    B = C
  end
  if h >= 240 and h < 300 then
    R = X
    B = C
  end
  if h >= 300 and h < 360 then
  R = C
  B = X
  end

  R = (R+M)*255
  G = (G+M)*255
  B = (B+M)*255
  return R,G,B

end


function bezier1(p0x,p1x, p2x,p3x, t)

    local q0x = lerp(p0x,p1x,t)
    local q1x = lerp(p1x,p2x,t)
    local q2x = lerp(p2x,p3x,t)

    local r0x = lerp(q0x, q1x,t)
    local r1x = lerp(q1x, q2x, t)

    local sx = lerp(r0x, r1x, t)
    return sx
end

function bezier_ease(p1x, p1y, p2x, p2y, t)
return bezier1(0,p1x, p2x,1,t), bezier1(0,p1y, p2y,1, t)
end

function bezier4(p0x,p0y,p1x, p1y, p2x, p2y,p3x,p3y, t)
return bezier1(p0x, p1x, p2x,p3x, t), bezier1(p0y, p1y, p2y,p3y, t)
end

function lerp(x,y, t)
local result = (t * (y - x) + x)
return result
end 

function hue_easings(t)
local func = bs_param2()
if func == 0 then return t end
if func == 1 then return bezier_ease(1,0,1,1,t) end
if func == 2 then return bezier_ease(0,0,0,1,t) end
if func == 3 then return bezier_ease(0,1,1,0,bezier_ease(0,1,1,0,bezier_ease(0,1,1,0,t)))end
if func == 4 then return bezier_ease(1,0,0,1,t) end
if func == 5 then return bezier1(0,2,-1,1,t) end
end

function choose_bezier(func)
func = func - 1
if func == 0 then return 0,0,1,1 end -- linear
if func == 1 then return 0.5, 0, 0.5, 1 end -- IO
if func == 2 then return 0, 0.5, 0.5, 0 end --IO on its side
if func == 3 then return 0, 1, 1, 1 end -- Ease In
if func == 4 then return 0.25, 0, 0.55, 0 end -- Ease Out
if func == 5 then return 0.5, 1, 0.5, 0 end -- Skewed IO on its side
if func == 6 then return 1, 0.1, 0 , 0.9 end -- Skewed IO 
if func == 7 then return 1, 0, 0, 0 end -- Spring Curve In
if func == 8 then return 0, 1, 0, 1 end -- Spring Curve Out
if func == 9 then return 0, 2, 1, -1 end -- Cosoid
end

function sv_easings(t,s0,sd,v0,vd)
 
  local ax, ay, bx, by = choose_bezier(bs_param3())
 
  local axL, ayL, bxL, byL = lerp(s0,sd,ax), lerp(v0,vd,ay), lerp(s0,sd,bx), lerp(v0,vd,by)

  local sDist, vDist = 1 - (math.abs(s0 - sd)), 1 - (math.abs(v0 - vd))
  local strength = 3
  local delta1S, delta1V = (axL*sDist * s_divergence * strength), (ayL * vDist * v_divergence* strength)
  local delta2S, delta2V = (bxL*sDist * s_divergence* strength), (byL * vDist * v_divergence* strength)
  local curvex, curvey = bezier4(s0,v0, axL + delta1S, ayL + delta1V, bxL + delta2S, byL + delta2V, sd, vd, t)
  
 return curvex, curvey
end

function interpolate(x,y,t)
return t * (y - x) + x
end

function draw_slice(x, y, theta,inner_radius,radius,delta,r,g,b)
  local half_delta = delta / 1.88
  bs_polygon(x+inner_radius * math.cos(theta + half_delta), y+inner_radius * math.sin(theta + half_delta))
  bs_polygon(x+inner_radius * math.cos(theta - half_delta), y+inner_radius * math.sin(theta - half_delta))
  bs_polygon(x+radius * math.cos(theta - half_delta), y+radius * math.sin(theta - half_delta))
  bs_polygon(x+radius * math.cos(theta + half_delta), y+radius * math.sin(theta + half_delta))
  bs_fill(r,g,b,255)
end

function draw_tri(x,y,radius,r,g,b)
  
  local del = 2 * math.pi / 3
  local p2 = -math.pi / 2
  bs_polygon(x + radius * math.cos(del+p2), y + radius * math.sin(del+p2))
  bs_polygon(x + radius * math.cos(del*2+p2), y + radius * math.sin(del*2+p2))
  bs_polygon(x + radius * math.cos(del*3+p2), y + radius * math.sin(del*3+p2))
  bs_fill(r,g,b,255)
end

function bounce_clamp(val)
if val < 0 then val = math.abs(val) end
if val > 1 then val = (1 - val) + 1 end
return val
end

function last( x, y, p )
  local w = bs_width_max()
  local r0,g0,b0 = bs_fore()
  
  local h0,s0,v0 = get_hsv(r0,g0, b0)
  local hd, sd, vd = get_hsv(rd,gd,bd)
--bs_debug_log("hue now: " .. h0)
--bs_debug_log("hue dest: " .. hd)
  draw_tri(x,y,w,r0,g0,b0)

  for i = 0.05, 1.05, 0.05 do
    local theta = i * 2 * math.pi
    local delta = 0.05 * 2 * math.pi
    local h = 0
    local anti_hd = hd - 360

    if  h0 - anti_hd  < 180 ~= (bs_param1() == 1) then
       h = interpolate(h0,anti_hd,hue_easings(i))
    else
       h = interpolate(h0,hd, hue_easings(i))
    end
     if h < 0 then h = 360 + h end
    local s, v = sv_easings(i, s0, sd, v0, vd)

    s, v = bounce_clamp(s), bounce_clamp(v)
    local j,k,l = get_rgb(h,s,v)
    draw_slice(x,y, theta, w, 2*w, delta,j,k,l)
    --bs_ellipse(s*100+x+20,(1-v)*100+y+20,5,5,0,j,k,l,255)


  end
end

s_divergence = (bs_param4()-10) / 10
v_divergence = (bs_param5()-10) /10

firstcall = true
rd, gd, bd, a = 0, 0, 0, 0
bs_setmode(0)
